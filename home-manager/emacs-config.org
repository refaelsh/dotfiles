#+PROPERTY: header-args 
#+STARTUP: showeverything
#+OPTIONS: ^:{}

* TABLE OF CONTENTS :TOC_5:
- [[#boilerplate-stuff][Boilerplate stuff]]
  - [[#path-to-the-custom-file][Path to the custom file]]
  - [[#set-up-packageel-to-work-with-various-sources][Set up package.el to work with various sources]]
  - [[#install-use-package][Install use-package]]
  - [[#packages-auto-updates][Packages auto updates]]
- [[#various-little-settings][Various little settings]]
  - [[#disable-all-the-gui-stuff][Disable all the GUI stuff.]]
  - [[#save-last-place-in-a-file][Save last place in a file]]
  - [[#restore-last-opened-file][Restore last opened file]]
  - [[#maximize-new-buffers][Maximize new buffers]]
  - [[#save-mini-buffer-history][Save mini buffer history]]
  - [[#never-loose-the-cursor][Never loose the cursor]]
  - [[#visual-bell][Visual bell]]
  - [[#make-esc-quit-prompts][Make ESC quit prompts]]
  - [[#turn-off-line-wrapping][Turn off line wrapping]]
  - [[#update-build-it-packages][Update build it packages]]
  - [[#smooth-scrolling][Smooth scrolling]]
- [[#save-everything-every-where-all-the-time][Save everything, every where all the time]]
- [[#detect-file-change-outside-of-emacs][Detect file change outside of Emacs]]
- [[#the-famous-which-key-package][The famous which-key package]]
- [[#package-for-easier-key-bindings][Package for easier key bindings]]
- [[#relative-line-numbers][Relative line numbers]]
- [[#icons-for-various-packages][Icons for various packages]]
- [[#on-the-fly-syntax-checking][On the fly syntax checking]]
- [[#flymake][Flymake]]
- [[#tree-sitter][Tree-sitter]]
- [[#org-mode][Org Mode]]
  - [[#auto-indentation-org-mode-style][Auto indentation Org Mode style]]
  - [[#various-little-settings-1][Various little settings]]
  - [[#org-modern][Org Modern]]
  - [[#enable-table-of-contents][Enable table of contents]]
  - [[#org-blocks-snippets][Org blocks snippets]]
  - [[#shortcut-for-save-and-tangle][Shortcut for save and tangle]]
  - [[#enumerate-headings][Enumerate headings]]
  - [[#images-inlining][Images inlining]]
- [[#restarting-emacs-from-emacs][Restarting Emacs from Emacs]]
- [[#font-and-ligatures][Font and ligatures]]
  - [[#font-settings][Font settings]]
  - [[#ligatures][Ligatures]]
- [[#dooms-mode-line][Doom's mode line]]
- [[#doom-one-theme][Doom One theme]]
- [[#scrolling][Scrolling]]
  - [[#disable-half-page-jumping][Disable half page jumping]]
  - [[#how-many-lines-at-a-time][How many lines at a time]]
  - [[#accelerate-scrolling][Accelerate scrolling]]
  - [[#scroll-window-under-mouse][Scroll window under mouse]]
- [[#debugging-the-config-file][Debugging the config file]]
- [[#undo-history-persistence][Undo history persistence]]
- [[#beautify][Beautify]]
- [[#projectile][Projectile]]
- [[#neotree][Neotree]]
- [[#dashboard---welcome-screen][Dashboard - welcome screen]]
- [[#evil-mode][Evil mode]]
  - [[#evil-itself][Evil itself]]
  - [[#evil-org][Evil org]]
  - [[#evil-collection][Evil collection]]
  - [[#evil-surround][Evil surround]]
  - [[#evil-goggles][Evil goggles]]
  - [[#evil-commentary][Evil commentary]]
  - [[#leader-key][Leader key]]
  - [[#search-behavior][Search behavior]]
  - [[#disable-the-arrow-keys][Disable the arrow keys]]
- [[#performance-tweaks][Performance tweaks]]
  - [[#startup][Startup]]
  - [[#runtime][Runtime]]
- [[#compilation-mode][Compilation mode]]
- [[#magit][Magit]]
- [[#languages][Languages]]
  - [[#haskell][Haskell]]
  - [[#nix][Nix]]
  - [[#elisp][Elisp]]
  - [[#rust][Rust]]
  - [[#yaml][Yaml]]
  - [[#markdown][Markdown]]
- [[#ivy][Ivy]]
- [[#snippets][Snippets]]
- [[#completion][Completion]]
- [[#lsp][LSP]]
  - [[#general-lsp-config][General LSP config]]
  - [[#key-bindings][Key bindings]]
- [[#git-auto-file-saver][Git auto file saver]]
- [[#git-modes][Git modes]]
- [[#emojis-support][Emojis support]]
- [[#mouse-support-in-terminal-emacs][Mouse support in terminal Emacs]]
- [[#displays-the-actual-color-of-a-hex-value-color][Displays the actual color of a hex value color]]
- [[#spell-checking][Spell checking]]
  - [[#using-flycheck-aspell][Using flycheck-aspell]]
  - [[#using-flyspell][Using Flyspell]]
- [[#better-elisp-help][Better Elisp help]]
- [[#brackets-colorization][Brackets colorization]]
- [[#better-term-mode-colors][Better term-mode colors]]
- [[#dired][Dired]]
- [[#git-status-on-the-fringe][Git status on the fringe]]
- [[#pretty-symbols][Pretty symbols]]
- [[#dim-irrelevant-buffers][Dim irrelevant buffers]]
- [[#todos][TODOs]]
  - [[#highlighting][Highlighting]]
  - [[#list-of-all-todos][List of all TODOs]]
- [[#slides-in-org-mode][Slides in Org Mode]]
- [[#games][Games]]

* Boilerplate stuff
  - [[#path-to-the-custom-file][Path to the custom file]]
  - [[#set-up-packageel-to-work-with-various-sources][Set up package.el to work with various sources]]
  - [[#install-use-package][Install use-package]]
  - [[#packages-auto-updates][Packages auto updates]]
- [[#various-little-settings][Various little settings]]
  - [[#disable-all-the-gui-stuff][Disable all the GUI stuff.]]
  - [[#save-last-place-in-a-file][Save last place in a file]]
  - [[#restore-last-opened-file][Restore last opened file]]
  - [[#maximize-new-buffers][Maximize new buffers]]
  - [[#save-mini-buffer-history][Save mini buffer history]]
  - [[#never-loose-the-cursor][Never loose the cursor]]
  - [[#visual-bell][Visual bell]]
  - [[#make-esc-quit-prompts][Make ESC quit prompts]]
  - [[#turn-off-line-wrapping][Turn off line wrapping]]
  - [[#update-build-it-packages][Update build it packages]]
  - [[#smooth-scrolling][Smooth scrolling]]
- [[#save-everything-every-where-all-the-time][Save everything, every where all the time]]
- [[#detect-file-change-outside-of-emacs][Detect file change outside of Emacs]]
- [[#the-famous-which-key-package][The famous which-key package]]
- [[#package-for-easier-key-bindings][Package for easier key bindings]]
- [[#relative-line-numbers][Relative line numbers]]
- [[#icons-for-various-packages][Icons for various packages]]
- [[#on-the-fly-syntax-checking][On the fly syntax checking]]
- [[#flymake][Flymake]]
- [[#tree-sitter][Tree-sitter]]
- [[#org-mode][Org Mode]]
  - [[#auto-indentation-org-mode-style][Auto indentation Org Mode style]]
  - [[#various-little-settings-1][Various little settings]]
  - [[#org-modern][Org Modern]]
  - [[#enable-table-of-contents][Enable table of contents]]
  - [[#org-blocks-snippets][Org blocks snippets]]
  - [[#shortcut-for-save-and-tangle][Shortcut for save and tangle]]
  - [[#enumerate-headings][Enumerate headings]]
  - [[#images-inlining][Images inlining]]
- [[#restarting-emacs-from-emacs][Restarting Emacs from Emacs]]
- [[#font-and-ligatures][Font and ligatures]]
  - [[#font-settings][Font settings]]
  - [[#ligatures][Ligatures]]
- [[#dooms-mode-line][Doom's mode line]]
- [[#doom-one-theme][Doom One theme]]
- [[#scrolling][Scrolling]]
  - [[#disable-half-page-jumping][Disable half page jumping]]
  - [[#how-many-lines-at-a-time][How many lines at a time]]
  - [[#accelerate-scrolling][Accelerate scrolling]]
  - [[#scroll-window-under-mouse][Scroll window under mouse]]
- [[#debugging-the-config-file][Debugging the config file]]
- [[#undo-history-persistence][Undo history persistence]]
- [[#beautify][Beautify]]
- [[#projectile][Projectile]]
- [[#neotree][Neotree]]
- [[#dashboard---welcome-screen][Dashboard - welcome screen]]
- [[#evil-mode][Evil mode]]
  - [[#evil-itself][Evil itself]]
  - [[#evil-org][Evil org]]
  - [[#evil-collection][Evil collection]]
  - [[#evil-surround][Evil surround]]
  - [[#evil-goggles][Evil goggles]]
  - [[#evil-commentary][Evil commentary]]
  - [[#leader-key][Leader key]]
  - [[#search-behavior][Search behavior]]
  - [[#disable-the-arrow-keys][Disable the arrow keys]]
- [[#performance-tweaks][Performance tweaks]]
  - [[#startup][Startup]]
  - [[#runtime][Runtime]]
- [[#compilation-mode][Compilation mode]]
- [[#magit][Magit]]
- [[#languages][Languages]]
  - [[#haskell][Haskell]]
  - [[#nix][Nix]]
  - [[#elisp][Elisp]]
  - [[#rust][Rust]]
  - [[#yaml][Yaml]]
  - [[#markdown][Markdown]]
- [[#ivy][Ivy]]
- [[#snippets][Snippets]]
- [[#completion][Completion]]
- [[#lsp][LSP]]
  - [[#general-lsp-config][General LSP config]]
  - [[#key-bindings][Key bindings]]
- [[#git-auto-file-saver][Git auto file saver]]
- [[#git-modes][Git modes]]
- [[#emojis-support][Emojis support]]
- [[#mouse-support-in-terminal-emacs][Mouse support in terminal Emacs]]
- [[#displays-the-actual-color-of-a-hex-value-color][Displays the actual color of a hex value color]]
- [[#spell-checking][Spell checking]]
  - [[#using-flycheck-aspell][Using flycheck-aspell]]
  - [[#using-flyspell][Using Flyspell]]
- [[#better-elisp-help][Better Elisp help]]
- [[#brackets-colorization][Brackets colorization]]
- [[#better-term-mode-colors][Better term-mode colors]]
- [[#dired][Dired]]
- [[#git-status-on-the-fringe][Git status on the fringe]]
- [[#pretty-symbols][Pretty symbols]]
- [[#cool-auto-indenting][Cool auto indenting]]
- [[#dim-irrelevant-buffers][Dim irrelevant buffers]]
- [[#todos][TODOs]]
  - [[#highlighting][Highlighting]]
  - [[#list-of-all-todos][List of all TODOs]]
- [[#slides-in-org-mode][Slides in Org Mode]]
- [[#games][Games]]

** Path to the custom file
#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'noerror)
#+end_src
** Set up package.el to work with various sources
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                           ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src
** Install use-package
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (setq use-package-always-ensure t)
#+end_src
** Packages auto updates
#+begin_src emacs-lisp
(use-package auto-package-update
:config
(auto-package-update-maybe)
:ensure t)
#+end_src
* Various little settings
** Disable all the GUI stuff.
#+begin_src emacs-lisp
  (menu-bar-mode -1) 
  (tool-bar-mode -1) 
  (scroll-bar-mode -1) 
  (setq-default frame-title-format nil)
  (setq frame-resize-pixelwise nil)
#+end_src
** Save last place in a file
#+begin_src emacs-lisp
(save-place-mode 1)
(setq desktop-load-locked-desktop nil)
#+end_src
** Restore last opened file
#+begin_src emacs-lisp
  ;; (setq desktop-save t)
  ;; ;; (setq desktop-path '("~/.emacs.d/desktop/")) 
  ;; (setq desktop-restore-frames t)
  ;; (desktop-save-mode 1)
#+end_src
** Maximize new buffers
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src
** Save mini buffer history
#+begin_src emacs-lisp
(savehist-mode 1)
#+end_src
** Never loose the cursor
#+begin_src emacs-lisp
(use-package beacon
:ensure t)
(beacon-mode 1) 
#+end_src
** Visual bell
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src
** Make ESC quit prompts
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** Turn off line wrapping
#+begin_src emacs-lisp
  (set-default 'truncate-lines t)
#+end_src
** Update build it packages
#+begin_src emacs-lisp
  (setq package-install-upgrade-built-in t)
 #+end_src
** Smooth scrolling
Does not seems to be working.
#+begin_src emacs-lisp
  (setq pixel-scroll-precision-mode t)
 #+end_src
* Save everything, every where all the time
#+begin_src emacs-lisp
  (use-package super-save
    :config
    (super-save-mode +1))
  (setq super-save-auto-save-when-idle t)
#+end_src
* Detect file change outside of Emacs
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t)
#+end_src
* The famous which-key package
#+begin_src emacs-lisp
  (use-package which-key
      :config
      (which-key-mode))
#+end_src
* Package for easier key bindings
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t))
#+end_src
* Relative line numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'visual)
  ;; (add-to-list 'focus-in-hook (lambda () (setq display-line-numbers-type 'visual)))
  ;; (add-to-list 'focus-out-hook (lambda () (setq display-line-numbers-type t)))

  ;; (add-hook 'focus-in-hook (lambda () (message "Emacs is gainging focus...")))
  ;; (add-hook 'focus-out-hook (lambda () (message "Emacs is losing focus...")))
#+end_src
* Icons for various packages
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src
Run the following manually once:
#+begin_src emacs-lisp
  ;; (all-the-icons-install-fonts)
#+end_src
* On the fly syntax checking
Deprecating in favor of the build in Flymake.
# Uses external tools to do its work.
# In Haskell's case for example it will use [[https://github.com/ndmitchell/hlint][hlint]].
# #+begin_src emacs-lisp
#   (use-package flycheck
#     :init (global-flycheck-mode))
#   (add-hook 'after-init-hook #'global-flycheck-mode)
#   (setq flycheck-display-errors-delay 0)

#   (use-package flycheck-haskell)
#   (add-hook 'haskell-mode-hook #'flycheck-haskell-setup)

#   ;; (use-package flycheck-inline)
#   ;; (global-flycheck-inline-mode)
# #+end_src
* Flymake
This is a build-in thingy in Emacs.
#+begin_src emacs-lisp
  (setq flymake-no-changes-timeout 0.1)
#+end_src
* Tree-sitter
TODO: it is now a built in thingy in Emacs. But I cant find the official documentation.
#+begin_src emacs-lisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src
* Org Mode
** Auto indentation Org Mode style
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-startup-indented t)
#+end_src
# ** Org modern indent
# #+begin_src emacs-lisp
#   (setq org-startup-indented t)
#   (use-package org-modern-indent
#     :load-path "~/repos/org-modern-indent/"
#     :config ; add late to hook
#   (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
#   #+end_src
** Various little settings
#+begin_src emacs-lisp
  (setq org-src-preserve-indentation nil
        org-src-tab-acts-natively t
        org-src-fontify-natively t
        org-hide-emphasis-markers t
        org-agenda-tags-column 0
        org-pretty-entities t
        org-ellipsis "…"
        org-confirm-babel-evaluate nil
        org-edit-src-content-indentation 2
        org-catch-invisible-edits 'show-and-error)
#+end_src
** Org Modern
#+begin_src emacs-lisp
  (use-package org-modern)
  (setq ;org-modern-hide-stars t
        org-modern-star 'replace)
  (global-org-modern-mode)
#+end_src
If needed, this will tell ~org-modern~ to leave org tables as is:
#+begin_src emacs-lisp
  ;; (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  ;; (custom-set-variables '(org-modern-table nil))
#+end_src
** Enable table of contents
#+begin_src emacs-lisp
  (use-package toc-org
    :init
    (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src
** Org blocks snippets
Tell use-package not to try to install org-tempo since it's already there - part of Org Mode.
#+begin_src emacs-lisp
  (use-package org-tempo
    :ensure nil)
#+end_src

Here are all the available snippets:
|------------------------+-----  --------------------------------- |
| Typing the below + TAB | Expands to ...                          |
|------------------------+-------------------------------  --------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |
|------------------------+-----------------------------------------|
Here are some templates:
#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("ha" . "src haskell"))
#+end_src
** Shortcut for save and tangle
#+begin_src emacs-lisp
  (general-nmap
    "<leader>t" 'org-babel-tangle)
#+end_src
** Enumerate headings
#+begin_src emacs-lisp
  ;; (setq org-startup-numerated t)
#+end_src
** Images inlining
#+begin_src emacs-lisp
  (setq org-startup-with-inline-images t)
#+end_src
# ** Remap ~org-meta-return~
# #+begin_src emacs-lisp
#   (general-imap
#     "RET" 'org-meta-return)
# #+end_src
* Restarting Emacs from Emacs
#+begin_src emacs-lisp
  (use-package restart-emacs)
  (general-nmap
    "<leader>re" '(lambda ()
  		  (interactive)
  		  (save-some-buffers t)
  		  (org-babel-tangle)
  		  (restart-emacs)))
  (setq confirm-kill-processes nil)
#+end_src
* Font and ligatures
** Font settings
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :family "Fira Code" 
                      :height 130
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      :font "Ubuntu"
                      :height 130
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                      :font "Fira Code"
                      :height 130
                      :weight 'medium)
#+end_src
** Ligatures
#+begin_src emacs-lisp
  (use-package ligature
    :load-path "path-to-ligature-repo"
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia and Fira Code ligatures in programming modes
    (ligature-set-ligatures '(prog-mode text-mode)
                            '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
                              ;; =:= =!=
                              ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
                              ;; ;; ;;;
                              (";" (rx (+ ";")))
                              ;; && &&&
                              ("&" (rx (+ "&")))
                              ;; !! !!! !. !: !!. != !== !~
                              ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
                              ;; ?? ??? ?:  ?=  ?.
                              ("?" (rx (or ":" "=" "\." (+ "?"))))
                              ;; %% %%%
                              ("%" (rx (+ "%")))
                              ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
                              ;; |->>-||-<<-| |- |== ||=||
                              ;; |==>>==<<==<=>==//==/=!==:===>
                              ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
                                              "-" "=" ))))
                              ;; \\ \\\ \/
                              ("\\" (rx (or "/" (+ "\\"))))
                              ;; ++ +++ ++++ +>
                              ("+" (rx (or ">" (+ "+"))))
                              ;; :: ::: :::: :> :< := :// ::=
                              (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
                              ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
                              ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
                                              "="))))
                              ;; .. ... .... .= .- .? ..= ..<
                              ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
                              ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
                              ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
                              ;; *> */ *)  ** *** ****
                              ("*" (rx (or ">" "/" ")" (+ "*"))))
                              ;; www wwww
                              ("w" (rx (+ "w")))
                              ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
                              ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
                              ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
                              ;; << <<< <<<<
                              ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
                                              "-"  "/" "|" "="))))
                              ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
                              ;; >> >>> >>>>
                              (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
                              ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
                              ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
                                           (+ "#"))))
                              ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
                              ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
                              ;; __ ___ ____ _|_ __|____|_
                              ("_" (rx (+ (or "_" "|"))))
                              ;; Fira code: 0xFF 0x12
                              ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
                              ;; Fira code:
                              "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
                              ;; The few not covered by the regexps.
                              "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t)
    :ensure t)
#+end_src
* Doom's mode line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
  ;; (setq doom-modeline-minor-modes t)
  (column-number-mode)
#+end_src
* Doom One theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config)
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    (doom-themes-org-config))
#+end_src
* Scrolling
** Disable half page jumping
Value greater than 100 gets rid of half page jumping.
#+begin_src emacs-lisp
  (setq scroll-conservatively 101)
#+end_src
** How many lines at a time
#+begin_src emacs-lisp
  (setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) 
#+end_src
** Accelerate scrolling
#+begin_src emacs-lisp
  (setq mouse-wheel-progressive-speed t) 
#+end_src
** Scroll window under mouse
#+begin_src emacs-lisp
  (setq mouse-wheel-follow-mouse 't)
#+end_src
* Debugging the config file
This is the package.
#+begin_src emacs-lisp
  (use-package bug-hunter) 
#+end_src
To use it, do the following: ~M-x bug-hunter-file~ and point to init.el and not emacs-config.org.
* Undo history persistence
#+begin_src emacs-lisp
  (use-package undohist
    :config
    (undohist-initialize))
#+end_src
* Beautify
#+begin_src emacs-lisp
  (use-package page-break-lines)
  (global-page-break-lines-mode)
#+end_src
* Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-global-mode 1)
    :ensure t)
  (setq projectile-enable-caching t)
#+end_src
* Neotree
#+begin_src emacs-lisp
  (use-package neotree)
  (setq-default neo-show-hidden-files t)
  (setq neo-theme 'icons)
  (setq neo-window-fixed-size nil)
  (setq neo-window-width 27)
#+end_src
Every time when the neotree window is opened, let it find current file and jump to node.
#+begin_src emacs-lisp
  (setq neo-smart-open t)
#+end_src
When running ‘projectile-switch-project’ (C-c p p), ‘neotree’ will change root automatically.
#+begin_src emacs-lisp
  (setq projectile-switch-project-action 'neotree-projectile-action)
#+end_src
* Dashboard - welcome screen
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook))
  (setq dashboard-projects-backend 'projectile)
  (setq dashboard-items '((recents . 9)
                          (projects . 9)
                          (agenda . 9)
                          (bookmarks . 3)
                          (registers . 3)))
  (setq dashboard-center-content t)
  (setq dashboard-show-shortcuts nil)
  (setq dashboard-icon-type 'all-the-icons) 
  ;; (setq dashboard-set-heading-icons t)
  ;; (setq dashboard-set-file-icons t)
#+end_src
This setting ensures that emacsclient always opens on dashboard rather than scratch.
#+begin_src emacs-lisp
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
* Evil mode
** Evil itself
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (evil-mode))
  (evil-set-undo-system 'undo-redo)
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd ":") 'evil-repeat-find-char)
    (define-key evil-motion-state-map (kbd ";") 'evil-ex))
#+end_src
** Evil org
#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src
** Evil collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
** Evil surround
#+begin_src emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+end_src
** Evil goggles
#+begin_src emacs-lisp
  (use-package evil-goggles
    :config
    (evil-goggles-mode))
  ;; (evil-goggles-use-diff-faces)
#+end_src
** Evil commentary
#+begin_src emacs-lisp
  (use-package evil-commentary
    :config
    (evil-commentary-mode))
  (general-nmap
    "<leader>c" 'evil-commentary-line)
  (general-vmap
    "<leader>c" 'evil-commentary)
#+end_src
** Leader key
#+begin_src emacs-lisp
  (evil-set-leader nil (kbd "SPC"))
#+end_src
** Search behavior
#+begin_src emacs-lisp
  (evil-select-search-module 'evil-search-module 'evil-search)
  (general-nmap
    "<leader>SPC" 'evil-ex-nohighlight)
#+end_src
** Disable the arrow keys
#+begin_src emacs-lisp
  (evil-define-key 'normal global-map (kbd "<up>") 'ignore)
  (evil-define-key 'normal global-map (kbd "<down>") 'ignore)
  (evil-define-key 'normal global-map (kbd "<left>") 'ignore)
  (evil-define-key 'normal global-map (kbd "<right>") 'ignore)
  (evil-define-key 'insert global-map (kbd "<up>") 'ignore)
  (evil-define-key 'insert global-map (kbd "<down>") 'ignore)
  (evil-define-key 'insert global-map (kbd "<left>") 'ignore)
  (evil-define-key 'insert global-map (kbd "<right>") 'ignore)
  (evil-define-key 'visual global-map (kbd "<up>") 'ignore)
  (evil-define-key 'visual global-map (kbd "<down>") 'ignore)
  (evil-define-key 'visual global-map (kbd "<left>") 'ignore)
  (evil-define-key 'visual global-map (kbd "<right>") 'ignore)
#+end_src
* Performance tweaks
** Startup
Using garbage magic hack.
#+begin_src emacs-lisp
  (use-package gcmh
    :config
    (gcmh-mode 1))
#+end_src
Setting garbage collection threshold.
#+begin_src emacs-lisp
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6)

#+end_src
Profile emacs startup.
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+end_src
** Runtime
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
Make GC pauses faster by decreasing the threshold.
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src
* Compilation mode
#+begin_src emacs-lisp
  (add-hook
   'compilation-finish-functions
   'switch-to-buffer-other-window
   'compilation)

  (setq compilation-scroll-output 'first-error)

  (general-nmap compilation-mode-map
    "<escape>" '(lambda ()
  		(interactive)
  		(bury-buffer)
  		(delete-window (get-buffer-window (get-buffer "*compilation*")))))

  (setq compilation-auto-jump-to-first-error t)
#+end_src
* Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src
* Languages
** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode)

  (general-nmap haskell-mode-map
    "<f5>" '(lambda ()
              (interactive)
              (save-some-buffers t)
              (setq-local haskell-compile-cabal-build-command "cabal build")
              (haskell-compile)))

  (general-nmap haskell-mode-map
    "<f7>" '(lambda ()
              (interactive)
              (save-some-buffers t)
              (setq-local haskell-compile-cabal-build-command "cabal test")
              (haskell-compile)))

  (general-nmap haskell-mode-map
    "<f10>" '(lambda ()
               (interactive)
               (projectile-run-async-shell-command-in-root "kitty -e cabal run")))

  (add-to-list 'display-buffer-alist
  	     (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))

  ;; (defun compilation-exit-autoclose (status code msg)
  ;;   (when (and (eq status 'exit) (zerop code))
  ;;     (bury-buffer)
  ;;     (delete-window (get-buffer-window (get-buffer "*compilation*"))))
  ;;   (cons msg code))
  ;; (setq compilation-exit-message-function 'compilation-exit-autoclose)
#+end_src
** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :hook (nix-mode . lsp-deferred))

  (use-package lsp-nix
    :ensure lsp-mode
    :after (lsp-mode)
    :demand t
    :custom
    (lsp-nix-nil-formatter ["nixpkgs-fmt"]))
#+end_src
** Elisp
#+begin_src emacs-lisp
  ;;(use-package parinfer-rust-mode
  ;;:hook emacs-lisp-mode
  ;;:init
  ;;(setq parinfer-rust-auto-download t))
  ;;(setq parinfer-rust-check-before-enable 'disabled)
#+end_src
For auto formatting:
#+begin_src emacs-lisp
  (use-package
    elisp-autofmt
    :commands (elisp-autofmt-mode elisp-autofmt-buffer)
    :config (setq elisp-autofmt-on-save-p 'always)
    :hook (emacs-lisp-mode . elisp-autofmt-mode))
#+end_src
** Rust
#+begin_src emacs-lisp
  (use-package rust-mode)
#+end_src
** Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
  (add-hook 'yaml-mode-hook
            '(lambda ()
               (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
#+end_src
** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))
#+end_src
* Ivy
Ivy is split into three packages: ivy, swiper and counsel.
By installing counsel, the other two are brought in as dependencies.
#+begin_src emacs-lisp
  (use-package counsel)
  (ivy-mode 1)
#+end_src
Here are some basic settings particularly useful for new Ivy users.
If you want, you can go without any customizations at all.
These settings are the most bang for the buck in terms of customization.
So users that typically don't like customize a lot are advised to look at
these settings first. 
#+begin_src emacs-lisp
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
#+end_src
Ivy-rich adds extra columns to a few of the Counsel commands to provide more information about each item.
#+begin_src emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src
The below provides some helpful behavior for sorting Ivy completion candidates
based on how recently or frequently you select them. This can be especially
helpful when using M-x to run commands that you don’t have bound to a key but
still need to access occasionally.
#+begin_src emacs-lisp
  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions.
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))
#+end_src
* Snippets
#+begin_src emacs-lisp
  (use-package yasnippet)
  (yas-global-mode 1)
  (use-package yasnippet-snippets)
#+end_src
* Completion
#+begin_src emacs-lisp
  (use-package company)
  (add-hook 'after-init-hook 'global-company-mode)
  (use-package company-cabal)
  (add-to-list 'company-backends 'company-cabal)
#+end_src
A company front-end with icons.
#+begin_src emacs-lisp
  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src
* LSP
** General LSP config
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'eglot-ensure)
  (add-hook 'gfm-mode-hook 'eglot-ensure)
  (add-hook 'yaml-mode-hook 'eglot-ensure)
  (setq eglot-confirm-server-initiated-edits nil)
#+end_src
** Key bindings
#+begin_src emacs-lisp
  (general-nmap "<leader>d" 'xref-find-definitions)
  (general-nmap "<leader>f" 'eglot-format-buffer)
  (general-nmap "<leader>a" 'eglot-code-actions)
  (general-nmap "<leader>h" 'eldoc-doc-buffer)
  ;; (general-nmap "<leader>r" 'eglot-rename)
#+end_src
* Git auto file saver
#+begin_src emacs-lisp
  (use-package git-auto-commit-mode)
  (setq-default gac-automatically-push-p t)
  (setq-default gac-automatically-add-new-files-p t)
#+end_src
* Git modes
#+begin_src emacs-lisp
  (use-package git-modes)
#+end_src
* Emojis support
#+begin_src emacs-lisp
  (use-package emojify
    :hook 
    (after-init . global-emojify-mode))
  (setq emojify-download-emojis-p t)
#+end_src
* Mouse support in terminal Emacs
#+begin_src emacs-lisp
  (xterm-mouse-mode 1)
#+end_src
* Displays the actual color of a hex value color
#+begin_src emacs-lisp
#+end_src
* Spell checking
** Using flycheck-aspell
#+begin_src emacs-lisp
  (use-package flycheck-aspell)
  (add-to-list 'flycheck-checkers 'tex-aspell-dynamic)
  (add-to-list 'flycheck-checkers 'markdown-aspell-dynamic)
  (add-to-list 'flycheck-checkers 'html-aspell-dynamic)
  (add-to-list 'flycheck-checkers 'xml-aspell-dynamic)
  (add-to-list 'flycheck-checkers 'nroff-aspell-dynamic)
  (add-to-list 'flycheck-checkers 'texinfo-aspell-dynamic)
  (add-to-list 'flycheck-checkers 'c-aspell-dynamic)
  (add-to-list 'flycheck-checkers 'mail-aspell-dynamic)
#+end_src
From the docs: For seamless Emacs Ispell integration, I recommend setting the following variables.
#+begin_src emacs-lisp
  (setq ispell-program-name "aspell")
  ;; I am not really if its needed at all.
  ;; (setq ispell-dictionary "en_US")
  (setq ispell-silently-savep t)
#+end_src
You may also want to advice ~spell-pdict-save~ to refresh flycheck when inserting new entries into your local dictionary. This way highlighting instantly updates when you add a previously unknown word.
#+begin_src emacs-lisp
  (advice-add #'ispell-pdict-save :after #'flycheck-maybe-recheck)
  (defun flycheck-maybe-recheck (_)
    (when (bound-and-true-p flycheck-mode)
      (flycheck-buffer)))
#+end_src
** Using Flyspell
#+begin_src emacs-lisp
  (use-package flyspell)
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'flyspell-buffer)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src
This will help with Org Mode spell checking by skipping org mode syntax.
#+begin_src emacs-lisp
  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
#+end_src
A function and a key for adding a word to a dictionary:
#+begin_src emacs-lisp
  (defun my-save-word ()
    (interactive)
    (let ((current-location (point))
          (word (flyspell-get-word)))
      (when (consp word)    
        (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))
#+end_src
Vim like keybinding.
#+begin_src emacs-lisp
  (general-nmap
    "zg" 'my-save-word)
  (general-nmap
    "z=" 'flyspell-correct-word-before-point)
#+end_src
* Better Elisp help
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src
* Brackets colorization
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
* Better term-mode colors
The eterm-256color package enhances the output of term-mode to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to. Keep in mind that this package requires ncurses to be installed on your machine so that it has access to the tic program. Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.
#+begin_src emacs-lisp
  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))
#+end_src
* Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil)
  (use-package all-the-icons-dired)
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src
* Git status on the fringe
#+begin_src emacs-lisp
  (use-package diff-hl)
  (global-diff-hl-mode)

  (diff-hl-dired-mode)
  (diff-hl-margin-mode)
  (diff-hl-flydiff-mode)
#+end_src
* Pretty symbols
#+begin_src emacs-lisp
  (defun my/org-mode/load-prettify-symbols ()
    (interactive)
    (setq prettify-symbols-alist
  	'(("lambda" . ?λ)))
    (prettify-symbols-mode 1))
  (add-hook 'org-mode-hook 'my/org-mode/load-prettify-symbols)
#+end_src
# * Cool auto indenting
# #+begin_src emacs-lisp
#   (use-package aggressive-indent)
#   (global-aggressive-indent-mode 1)
# #+end_src
# The variable aggressive-indent-dont-indent-if lets you customize when you don't want indentation to happen. For instance, if you think it's annoying that lines jump around in c++-mode because you haven't typed the ; yet, you could add the following clause:
# #+begin_src emacs-lisp
#   (add-to-list
#    'aggressive-indent-dont-indent-if
#    '(and (derived-mode-p 'c++-mode)
#          (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
#                              (thing-at-point 'line)))))
# #+end_src
* Dim irrelevant buffers
The ~solaire-mode~ package is an aesthetic plugin designed to visually distinguish "real" buffers (i.e. file-visiting code buffers where you do most of your work) from "unreal" buffers (like popups, sidebars, log buffers, terminals, etc) by giving the latter a slightly different -- often darker -- background.
#+begin_src emacs-lisp
  (use-package solaire-mode)
  (solaire-global-mode +1)
#+end_src
* TODOs
** Highlighting
#+begin_src emacs-lisp
  (use-package hl-todo)
  (global-hl-todo-mode)
#+end_src
** List of all TODOs
#+begin_src emacs-lisp
  (defun find-all-todos ()
    "Find all TODOs"
    (interactive)
    (projectile-grep "-- TODO"))

  (general-nmap "<leader>lt" 'find-all-todos)
#+end_src
* Slides in Org Mode
#+begin_src emacs-lisp
  (use-package moom
    :init (moom-mode 1))

  (use-package org-tree-slide
    :hook ((org-tree-slide-play . (lambda() (moom-toggle-frame-maximized)))
           (org-tree-slide-stop . (lambda() (moom-toggle-frame-maximized))))
    :custom
    (org-tree-slide-cursor-init)
    (org-image-actual-width nil))
  (general-nmap "<leader>p" 'org-tree-slide-mode)
  (general-nmap "<leader>vm" 'view-mode)
  (define-key org-tree-slide-mode-map (kbd "C-<down>") 'org-tree-slide-move-next-tree)
  (define-key org-tree-slide-mode-map (kbd "C-<up>") 'org-tree-slide-move-previous-tree)
#+end_src
This solves an issue with slide numbers in Doom mode line. Taken from here: https://github.com/takaxp/org-tree-slide/issues/65.
#+begin_src emacs-lisp
  (defun my-add-slide-number ()
    (add-to-list 'global-mode-string
                 '(:eval (concat "" (org-tree-slide--update-modeline) " "))))
  (defun my-remove-slide-number ()
    (setq global-mode-string
          (remove '(:eval (concat "" (org-tree-slide--update-modeline) " "))
                  global-mode-string)))
  (add-hook 'org-tree-slide-play-hook #'my-add-slide-number)
  (add-hook 'org-tree-slide-stop-hook #'my-remove-slide-number)
#+end_src
* Games
#+begin_src emacs-lisp
#+end_src
